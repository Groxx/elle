digraph proof {
  // concentrate=true

  subgraph cluster0 {
    label = "Versions"
    node [shape="diamond"]
    v0 [label="{}"]
    v1 [label="{1}",style="filled"]
    v2 [label="{2}"]
    v3 [label="{3}"]
    v12 [label="{1,2}"]
    v13 [label="{1,3}"]
    v23 [label="{2,3}"]
    v123 [label="{1,2,3}"]

    // Version graph
    edge [dir="back",label="v",color="royalblue2",fontcolor="royalblue2"]
    v123 -> v12
    v123 -> v13
    v123 -> v23
    v12 -> v1
    v12 -> v2
    v13 -> v1
    v13 -> v3
    v23 -> v2
    v23 -> v3
    v1 -> v0
    v2 -> v0
    v3 -> v0

    // Version order
    edge [dir="forward",label="â‰ª",color="palegreen4",fontcolor="palegreen4"]
    v123 -> v12
    v12 -> v0

    // Inferred version order
    edge [label="<",color="mediumturquoise",fontcolor="mediumturquoise"]
    v12 -> v0
  }

  subgraph cluster1 {
    label = "Observed Transactions"
    node [shape=record,height="0.3"]
    ot1 [label="<op0> r|<op1> r1,2|<op2> c"]
    ot2 [label="<op0> w1|<op1> w2"]
    ot3 [label="<op0> r_|<op1> w3"]
  }

  subgraph cluster2 {
    label = "Ayda Transactions"
    node [shape=record,height="0.3"]
    at1 [label="<op0> r|<op1> r1,2|<op2> c"]
    at2 [label="<op0> w1|<op1> w2|<op2> c"]
    at3 [label="<op0> r|<op1> w3|<op2> c"]
  }

  // Actual dependencies
  edge [color="slateblue",fontcolor="slateblue"]
  at1:op0 -> at2:op1 [label="rw"]
  at2:op1 -> at1:op1 [label="wr"]
  at2:op1 -> at3:op1 [label="ww"]
  at3:op0 -> at2:op1 [label="rw"]

  // Inferred dependencies
  ot1:op0 -> ot2:op1 [label="rw"]
  ot2:op1 -> ot1:op1 [label="wr"]

  // Reads
  edge [label="read",dir="both",color="maroon3",fontcolor="maroon3"]
  v0  -> ot1:op0
  v12 -> ot1:op1

  // Recoverability
  edge [dir="forward",label="rec",color="orangered2",fontcolor="orangered2"]
  v1  -> ot2:op0
  v12 -> ot2:op0
  v12 -> ot2:op1

  // Compatibility
  edge [dir="forward",label="R",dir="both",color="slategray",fontcolor="slategray"]
  ot1 -> at1
  ot2 -> at2
  ot3 -> at3

  // Adya version/txn relationshiops
  //edge [dir="none",color="thistle3",style="dashed",label=""]
  //at1:op0 -> v0
  //at1:op1 -> v2
  //at2:op0 -> v1
  //at2:op1 -> v2
  //at3:op0 -> v0
  //at3:op1 -> v3
}
